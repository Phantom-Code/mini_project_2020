<% include partials/header %>
<div class="container ">
    <h1>Video Detection</h1>
    <div class="row">
        <div class="col-12">
            <div class="progress progress-bar progress-bar-striped progress-bar-animated mb-2">Loading Model</div>
        </div>
    </div>
    <div class="row">
        <div class="col-md-4">
            <video id="video" autoplay muted style="width: 100%;height: auto;"></video>
            <canvas id="canvas2" class="draw_canvas" style="position: absolute;top: 0; left: 0;"></canvas>
        </div>
        <div class="col-md-4">
            <video id="video2" autoplay muted style="width: 100%;height: auto;">
                <source src="/images/Apna Time Aayega Gully Boy Ranveer Singh & Alia Bh.mp4" type="video/mp4">
            </video>

            <canvas id="draw_can" class="draw_canvas" style="position: absolute;top: 0; left: 0;"></canvas>
        </div>
    </div>
    <div class="row">
        <div class="col-md-4">
            <canvas id="canvas" class="video_canvas" hidden></canvas>
        </div>
        <div class="col-md-4">
            <canvas id="video_canvas" class="video_canvas" hidden></canvas>
        </div>
    </div>
</div>



<!-- Load TensorFlow.js. This is required to use coco-ssd model. -->
<script src="https://cdnjs.cloudflare.com/ajax/libs/tensorflow/1.7.2/tf.min.js"> </script>
<!-- Load the coco-ssd model. -->
<script src="https://cdn.jsdelivr.net/npm/@tensorflow-models/coco-ssd"> </script>
<script>
    var videoList = document.getElementsByTagName('video');
    var video_canvasList = document.getElementsByClassName('video_canvas');
    var draw_canvasList = document.getElementsByClassName('draw_canvas');
    (async () => {
        var flipHorizontal = false;
        const model = await cocoSsd.load();
        $('.progress').hide();
       
        const video = document.getElementById('video');
        const stream = await navigator.mediaDevices.getUserMedia({
            audio: false,
            video: { facingMode: 'environment' }
        });
        video.srcObject = stream

        video_canvasList = Array.from(video_canvasList);
        draw_canvasList = Array.from(draw_canvasList);
        videoList = Array.from(videoList);
        
        for (i = 0; i < videoList.length; i += 1) {
            var video_context = video_canvasList[i].getContext('2d');
            var draw_context = draw_canvasList[i].getContext('2d');
            predict(videoList[i],video_canvasList[i],video_context,draw_canvasList[i],draw_context); 
        }
       
        async function predict(video,video_canvas,video_context,draw_canvas,draw_context) {
            video_canvas.width=video.clientWidth;
            video_canvas.height=video.clientHeight;
            video_context.drawImage(video, 0, 0, video.clientWidth, video.clientHeight);
            const predictions = await model.detect(video_canvas);
           
            draw_canvas.width=video.clientWidth;
            draw_canvas.height=video.clientHeight;
            
            predictions.forEach(prediction=>{
                draw_context.beginPath();
                draw_context.lineWidth = "2";
                draw_context.strokeStyle = "blue";
                draw_context.rect(prediction['bbox'][0],prediction['bbox'][1],prediction['bbox'][2],prediction['bbox'][3]);
                draw_context.stroke();
                
                draw_context.font = "30px Arial";
                draw_context.fillStyle = "blue";
                var desc = prediction['class'] + ' '+ parseInt(prediction['score']*100).toString()+'%';
                draw_context.fillText(desc,prediction['bbox'][0],prediction['bbox'][1]-10);
            })

            requestAnimationFrame(function(){
                predict(video,video_canvas,video_context,draw_canvas,draw_context);
            })
        }
        
    })();

</script>
<% include partials/footer %>